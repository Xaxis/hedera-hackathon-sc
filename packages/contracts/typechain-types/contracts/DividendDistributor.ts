/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DividendDistributorInterface extends utils.Interface {
  functions: {
    "claimDividend(uint256)": FunctionFragment;
    "claimMultipleDividends(uint256[])": FunctionFragment;
    "createDistribution()": FunctionFragment;
    "distributions(uint256)": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "getClaimableDividend(uint256,address)": FunctionFragment;
    "getDistribution(uint256)": FunctionFragment;
    "getDistributionCount()": FunctionFragment;
    "hasClaimed(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "propertyToken()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalClaimed(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimDividend"
      | "claimMultipleDividends"
      | "createDistribution"
      | "distributions"
      | "emergencyWithdraw"
      | "getClaimableDividend"
      | "getDistribution"
      | "getDistributionCount"
      | "hasClaimed"
      | "owner"
      | "propertyToken"
      | "renounceOwnership"
      | "totalClaimed"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimDividend",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMultipleDividends",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableDividend",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistribution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "propertyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMultipleDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propertyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "DividendClaimed(uint256,address,uint256)": EventFragment;
    "DividendDistributed(uint256,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DividendClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DividendDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface DividendClaimedEventObject {
  distributionId: BigNumber;
  holder: string;
  amount: BigNumber;
}
export type DividendClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DividendClaimedEventObject
>;

export type DividendClaimedEventFilter = TypedEventFilter<DividendClaimedEvent>;

export interface DividendDistributedEventObject {
  distributionId: BigNumber;
  amount: BigNumber;
  totalShares: BigNumber;
}
export type DividendDistributedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  DividendDistributedEventObject
>;

export type DividendDistributedEventFilter =
  TypedEventFilter<DividendDistributedEvent>;

export interface EmergencyWithdrawEventObject {
  owner: string;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface DividendDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DividendDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimDividend(
      distributionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimMultipleDividends(
      distributionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createDistribution(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        timestamp: BigNumber;
        totalShares: BigNumber;
        claimedAmount: BigNumber;
      }
    >;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getClaimableDividend(
      distributionId: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDistribution(
      distributionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        timestamp: BigNumber;
        totalShares: BigNumber;
        claimedAmount: BigNumber;
      }
    >;

    getDistributionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasClaimed(
      distributionId: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    propertyToken(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimDividend(
    distributionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimMultipleDividends(
    distributionIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createDistribution(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      timestamp: BigNumber;
      totalShares: BigNumber;
      claimedAmount: BigNumber;
    }
  >;

  emergencyWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getClaimableDividend(
    distributionId: PromiseOrValue<BigNumberish>,
    holder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDistribution(
    distributionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      timestamp: BigNumber;
      totalShares: BigNumber;
      claimedAmount: BigNumber;
    }
  >;

  getDistributionCount(overrides?: CallOverrides): Promise<BigNumber>;

  hasClaimed(
    distributionId: PromiseOrValue<BigNumberish>,
    holder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  propertyToken(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalClaimed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimDividend(
      distributionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimMultipleDividends(
      distributionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createDistribution(overrides?: CallOverrides): Promise<void>;

    distributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        timestamp: BigNumber;
        totalShares: BigNumber;
        claimedAmount: BigNumber;
      }
    >;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    getClaimableDividend(
      distributionId: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistribution(
      distributionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        timestamp: BigNumber;
        totalShares: BigNumber;
        claimedAmount: BigNumber;
      }
    >;

    getDistributionCount(overrides?: CallOverrides): Promise<BigNumber>;

    hasClaimed(
      distributionId: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    propertyToken(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    totalClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DividendClaimed(uint256,address,uint256)"(
      distributionId?: PromiseOrValue<BigNumberish> | null,
      holder?: PromiseOrValue<string> | null,
      amount?: null
    ): DividendClaimedEventFilter;
    DividendClaimed(
      distributionId?: PromiseOrValue<BigNumberish> | null,
      holder?: PromiseOrValue<string> | null,
      amount?: null
    ): DividendClaimedEventFilter;

    "DividendDistributed(uint256,uint256,uint256)"(
      distributionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      totalShares?: null
    ): DividendDistributedEventFilter;
    DividendDistributed(
      distributionId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      totalShares?: null
    ): DividendDistributedEventFilter;

    "EmergencyWithdraw(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      owner?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    claimDividend(
      distributionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimMultipleDividends(
      distributionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createDistribution(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getClaimableDividend(
      distributionId: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistribution(
      distributionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributionCount(overrides?: CallOverrides): Promise<BigNumber>;

    hasClaimed(
      distributionId: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    propertyToken(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimDividend(
      distributionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimMultipleDividends(
      distributionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createDistribution(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getClaimableDividend(
      distributionId: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistribution(
      distributionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasClaimed(
      distributionId: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    propertyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
